@using YSI.CurseOfSilverCrown.Core.Database.Enums;
@using YSI.CurseOfSilverCrown.Core.Parameters;
@using YSI.CurseOfSilverCrown.Core.Commands;
@using YSI.CurseOfSilverCrown.Core.Utils;
@model YSI.CurseOfSilverCrown.Core.Database.Models.Organization

@{
    ViewData["Title"] = "Провинция";
}

<h1>Моя провинция</h1>

<div>
    <h4>Провинция</h4>

    <table class="table">
        <tbody>
            <tr>
                <td>
                    @Html.DisplayNameFor(model => model.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Name)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.DisplayNameFor(model => model.Warriors)
                </td>
                <td>
                    @Model.Warriors
                </td>
            </tr>
            <tr>
                <td>
                    @Html.DisplayNameFor(model => model.Coffers)
                </td>
                <td>
                    @Model.Coffers
                </td>
            </tr>
            <tr>
                <td>
                    Защита
                </td>
                @{
                    var freeCommands = Model.Warriors - Model.Commands.Sum(c => c.Warriors);
                    var taxWarriros = Model.Commands.Single(c => c.Type == enCommandType.CollectTax).Warriors;
                    var defenseWarrioirs = Model.Commands
                        .SingleOrDefault(c => c.Type == enCommandType.WarSupportDefense && c.TargetOrganizationId == Model.Id)
                        ?.Warriors ?? 0;
                    var defense =
                        (freeCommands + taxWarriros) * FortificationsHelper.GetWariorDefenseCoeficient(WarConstants.WariorDefenseTax, Model.Fortifications) +
                        defenseWarrioirs * FortificationsHelper.GetWariorDefenseCoeficient(WarConstants.WariorDefenseSupport, Model.Fortifications);
                    <td>@Math.Round(defense, 1)</td>
                }
            </tr>
            <tr>
                <td>
                    @Html.DisplayNameFor(model => model.Investments)
                </td>
                <td>
                    @ViewHelper.GetSweetNumber((Model.Investments + InvestmentsHelper.IlusionInvestment))
                </td>
            </tr>
            <tr>
                <td>
                    @Html.DisplayNameFor(model => model.Fortifications)
                </td>
                <td>
                    +@(FortificationsHelper.GetDefencePercent(Model.Fortifications) - 100)% (вложено - @Model.Fortifications)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.DisplayNameFor(model => model.Suzerain)
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@Model.Suzerain?.Id">
                        @Html.DisplayFor(model => model.Suzerain.Name)
                    </a>
                </td>
            </tr>
            <tr>
                <td>
                    @Html.DisplayNameFor(model => model.Vassals)
                </td>
                <td>
                    @for (var i = 0; i < Model.Vassals.Count; i++)
                    {
                        var vassal = Model.Vassals[i];
                        <span>
                            <a asp-action="Details" asp-route-id="@vassal.Id">
                                @vassal.Name
                            </a>
                        </span>
                        if (i + 1 < Model.Vassals.Count)
                        {
                            <span>, </span>
                        }
                    }
                </td>
            </tr>
            <tr>
                <td>
                    @Html.DisplayNameFor(model => model.Commands)
                </td>
                <td>
                    <a asp-controller="Commands" asp-action="Index">
                        Посмотреть/Изменить
                    </a>
                </td>
            </tr>
            <tr>
                <td>
                    Прошлые действия
                </td>
                <td>
                    @{
                        var lastEventStories = ViewBag.LastEventStories as List<List<string>>;
                        foreach (var eventStory in lastEventStories)
                        {
                            @foreach (var line in eventStory)
                            {
                                <p style="margin-bottom: 0;">@line</p>
                            }
                            <p style="margin-bottom: 0;">____________________</p>
                        }
                    }
                </td>
            </tr>
        </tbody>
    </table>
</div>
