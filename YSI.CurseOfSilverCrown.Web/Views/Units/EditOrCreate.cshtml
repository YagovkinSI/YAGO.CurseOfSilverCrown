@using YSI.CurseOfSilverCrown.Core.Database.Models;
@using YSI.CurseOfSilverCrown.Core.Database.Enums;
@using YSI.CurseOfSilverCrown.Core.Commands;
@using YSI.CurseOfSilverCrown.Core.Parameters;
@using YSI.CurseOfSilverCrown.Core.ViewModels;
@using Newtonsoft.Json;
@using YSI.CurseOfSilverCrown.Core.Database.Models.GameWorld;
@using YSI.CurseOfSilverCrown.Core.Helpers;
@model YSI.CurseOfSilverCrown.Core.Commands.BaseCommand

@{
    ViewData["Title"] = Model.Name;
    var resourses = ViewBag.Resourses as Dictionary<string, List<int>>;
    
    var targetOrganizationsJson = ViewBag.TargetOrganizations == null
        ? new object()
        : @Html.Raw(JsonConvert.SerializeObject(ViewBag.TargetOrganizations));
    var target2OrganizationsJson = ViewBag.Target2Organizations == null
        ? new object()
        : @Html.Raw(JsonConvert.SerializeObject(ViewBag.Target2Organizations));

    var isCreate = Model.Id == 0;
    var type = Model.TypeInt;
    var organization = ViewBag.Organization as Domain;
}

<h1>@(isCreate ? "Создание" : "Редактирование")</h1>

<h4>@organization.Name: @Model.Name</h4>

<div>
    <a class="nav-link" asp-action="Index" asp-route-organizationId="@organization.Id">К списку отрядов</a>
</div>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action=@(isCreate ? "Create" : "Edit")>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @if (isCreate)
            {
                <input type="hidden" asp-for="Id" />
            }
            <input type="hidden" asp-for="TypeInt" value="@type" />
            <input type="hidden" asp-for="DomainId" value="@organization.Id" />

            @if (Model.NeedTarget2)
            {
                <div id="commandTarget2" class="form-group">
                    <label asp-for="Target2DomainId" class="control-label">@Model.Target2Name: </label>
                    <select asp-for="Target2DomainId" class="form-control" asp-items="ViewBag.Target2OrganizationId"
                            onchange="onSomeChanged()"></select>
                    <span asp-validation-for="Target2DomainId" class="text-danger"></span>
                </div>
            }
            else
            {
                <input type="hidden" asp-for="Target2DomainId" />
            }

            @if (Model.NeedTarget)
            {
                <div id="commandTarget" class="form-group">
                    <label asp-for="TargetDomainId" class="control-label">@Model.TargetName: </label>
                    <select asp-for="TargetDomainId" class="form-control" asp-items="ViewBag.TargetOrganizationId"
                            onchange="onSomeChanged()"></select>
                    <span asp-validation-for="TargetDomainId" class="text-danger"></span>
                </div>
            }
            else
            {
                <input type="hidden" asp-for="TargetDomainId" value="@Model.TargetId" />
            }

            @if (Model.NeedCoffers)
            {
                <div id="coffers" class="form-group">
                    <label asp-for="Coffers" class="control-label"></label>
                    <input asp-for="Coffers"
                           class="form-control" type="range"
                           min="@(Model.IsSingleCommand ? 0 : 1)"
                           max="@Math.Min(Model.MaxCoffers, resourses["Казна"][2])"
                           step="@Model.StepCoffers"
                           onchange="onSomeChanged()" />
                    <span asp-validation-for="Coffers" class="text-danger"></span>
                </div>
            }

            <input type="hidden" asp-for="Warriors" value="@Model.Warriors" />

            <span id="expectation"></span>
            <div class="form-group">
                <input type="submit" value="Сохранить" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div class="row">
    @foreach (var description in Model.Descriptions)
    {
        <p style="margin-bottom: 0">
            @description
        </p>
    }

</div>

<div>
    <a asp-action="Index" asp-route-organizationId="@organization.Id">К списку</a>
</div>

<script type="text/javascript">

    window.onload = function () {
        let coffers = document.getElementById("Coffers");
        if (coffers != null)
            coffers.value = @(isCreate
                ? Math.Min(Model.MaxCoffers, resourses["Казна"][2])
                : Model.Coffers);

        onSomeChanged();
    };

    function onSomeChanged() {
        let expectation = document.getElementById("expectation");
        expectation.innerText = "";

        let needCommo = false;

        let warriors = document.getElementById("Warriors");
        if (warriors != null) {
            if (needCommo)
                expectation.innerText += ', ';
            expectation.innerText += 'Количество воинов: ' + warriors.value;
            needCommo = true;
        }

        let coffers = document.getElementById("Coffers");
        if (coffers != null){
            if (needCommo)
                expectation.innerText += ', ';
            expectation.innerText += 'Количество вкладываемых средств казны: ' + coffers.value;
            needCommo = true;
        }

        switch (@(Model.TypeInt)) {
            case @((int)enArmyCommandType.War):
                onSomeChangedWar(expectation, needCommo);
                break;
            case @((int)enCommandType.Growth):
                onSomeChangedGrowth(expectation, needCommo);
                break;
            case @((int)enArmyCommandType.CollectTax):
                onSomeChangedCollectTax(expectation, needCommo);
                break;
            case @((int)enCommandType.Fortifications):
                onSomeChangedFortifications(expectation, needCommo);
                break;
            case @((int)enArmyCommandType.WarSupportAttack):
            case @((int)enCommandType.GoldTransfer):
            default:
                break;
        }
    }
    function onSomeChangedWar(expectation, needCommo) {
        if (needCommo)
            expectation.innerText += ', ';

        let targetId = document.getElementById("TargetDomainId").value;
        let array = @targetOrganizationsJson;
        console.log(array);
        console.log(targetId);
        let target = array.find(e => e.TargetDomain.Id == targetId);
        console.log(target);
        let warriors = parseInt(document.getElementById("Warriors").value);
        let chanseStr = 'неизвестны';
        let defenseCoeficient = Math.sqrt(target.TargetDomain.Fortifications * 0.0008);
        const targetWarriorCount = target.TargetDomain.WarriorCount;
        if (warriors * 0.8 >= targetWarriorCount * defenseCoeficient * 1.2)
            chanseStr = 'абсолютная победа';
        else if (warriors * 0.95 >= targetWarriorCount * defenseCoeficient * 1.05)
            chanseStr = 'хорошие шансы на победу';
        else if (warriors * 1.05 >= targetWarriorCount * defenseCoeficient * 0.95)
            chanseStr = 'война на равных';
        else if (warriors * 1.2 >= targetWarriorCount * defenseCoeficient * 0.8)
            chanseStr = 'победа маловероятна';
        else
            chanseStr = 'никаких шансов';


        expectation.innerText +=
            'Количество воинов соперника: ' + targetWarriorCount + ', шансы на победу, если противник будет в защите и без поддержки: ' + chanseStr;
    }

    function onSomeChangedGrowth(expectation, needCommo) {
        if (needCommo)
            expectation.innerText += ', ';

        let coffers = parseInt(document.getElementById("Coffers").value);
        let warriors = coffers / @WarriorParameters.Price;
        expectation.innerText += 'Количество воинов: ' + warriors;
    }

    function onSomeChangedCollectTax(expectation, needCommo) {
        if (needCommo)
            expectation.innerText += ', ';

        let warriors = parseInt(document.getElementById("Warriors").value);
        let tax = warriors * @Constants.AdditionalTax;
        expectation.innerText +=
            'Ожидаемый доход: ' + tax;
    }

    function getDefencePercent(fortifications)
    {
        let defencePercent = 100;
        if (fortifications > 18000)
            defencePercent = 200 + ((fortifications - 18000) / 500);
        else if (fortifications > 5000)
            defencePercent = 150 + ((fortifications - 5000) / 300);
        else if (fortifications > 0)
            defencePercent = 100 + ((fortifications) / 100);
        return defencePercent;
    }

    function onSomeChangedFortifications(expectation, needCommo) {
        if (needCommo)
            expectation.innerText += ', ';

        let coffers = parseInt(document.getElementById("Coffers").value);
        let currentInvestment = @resourses["Укрепления"][2];
        let newInvestment = currentInvestment + coffers;

        let currentProfit = getDefencePercent(currentInvestment);
        let newProfit = getDefencePercent(newInvestment);
        let additionalProfit = newProfit - currentProfit;

        let additionalProfitPercent = Math.round(additionalProfit * 100);

        let additionalMaintenance = Math.round(coffers * 0.1);

        expectation.innerText +=
            'Ожидемый прирост затрат на содержане ' + additionalMaintenance + ', Ожидаемый бонус к защите: ' + additionalProfitPercent + '%';
    }


</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
